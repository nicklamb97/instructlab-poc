2024-07-15T15:39:33 - Discarded instruction(didn't match expected format): '\nInstructions:\n'
2024-07-15T16:04:53 - Discarded instruction(contained a word from the denylist): ['\n', 'Instruction', '\nHow can you draw a line between two points on the screen in Actian 4GL OpenROAD Procedure Statement?\n', 'Input', '\n<noinput>\n', 'Output', '\nUse the following syntax to draw a line between two points on the screen:\n```\ndraw_line(100, 200, 300, 400);\n```\n']
2024-07-15T16:07:54 - Discarded instruction(didn't match expected format): '\nInstructions and outputs should be related to each other. For example, when the instruction asks for a specific task or action, it is not necessary to provide an input. In this case, we simply put "<noinput>" in the input field. The output should be an appropriate response to the instruction and the input. Make sure the output is less than 100 words.\n'
2024-07-15T16:15:10 - Discarded instruction(didn't match expected format): '\nYou are asked to come up with a set of 5 diverse task instructions under compositional_skills->programming_languages->actian_4gl->procedure_statement for the task "Write Actian 4GL OpenROAD Procedure Statements". These task instructions will be given to a GPT model and we will evaluate the GPT model for completing the instructions.\n\nHere are the requirements:\n1. Try not to repeat the verb for each instruction to maximize diversity.\n2. The language used for the instruction also should be diverse. For example, you should combine questions with imperative instructions.\n3. The type of instructions should not have topic diversity. The list should follow the same topic and category.\n4. A GPT language model should be able to complete the instruction. For example, do not ask the assistant to create any visual or audio output. For another example, do not ask the assistant to wake you up at 5pm or set a reminder because it cannot perform any action.\n5. The instructions should be in English.\n6. The instructions should be 1 to 2 sentences long. Either an imperative sentence or a question is permitted.\n7. You should generate an appropriate input to the instruction. The input field should contain a specific example provided for the instruction. It should involve realistic data and should not contain simple placeholders. The input should provide substantial content to make the instruction challenging but should ideally not exceed 100 words.\n8. Not all instructions require input. For example, when an instruction asks about some general information, "what is the highest peak in the world", it is not necessary to provide a specific context. In this case, we simply put "<noinput>" in the input field.\n9. The output should be an appropriate response to the instruction and the input. Make sure the output is less than 100 words.\n\n\nList of 5 tasks:\n'
2024-07-15T16:30:24 - Discarded instruction(didn't match expected format): '\nInstruction\nHow do you create and initialize variables of different types in Actian 4GL OpenROAD Procedure Statements?\n\nOutput\nYou can declare variables with any valid type. Here is an example:\n```\ninteger age;\nfloat speed;\nboolean enabled;\n```\n'
2024-07-15T16:55:19 - Discarded instruction(didn't match expected format): "\n* Instruction: How can you define a procedure in Actian 4GL OpenROAD Procedure Statement?\n* Input: <noinput>\n* Output: To define a procedure, use the following syntax:\n```\nprocedure name(parameters)\n{\n    // Procedure code here\n}\n```\nWhere 'name' is the name of the procedure and 'parameters' are the parameters for the procedure. The procedure can have any number of parameters, including no parameters at all. The procedure code consists of any valid Actian 4GL statements.\n"
2024-07-15T16:55:19 - Discarded instruction(didn't match expected format): ": How can you call another procedure from within your procedure?\n* Input: <noinput>\n* Output: To call another procedure from within your procedure, use the following syntax:\n```\ncall procedure name(parameters);\n```\nWhere 'name' is the name of the procedure to be called and 'parameters' are the parameters for the procedure. The procedure can have any number of parameters, including no parameters at all. The call statement executes the code in the called procedure.\n"
2024-07-15T16:58:00 - Discarded instruction(didn't match expected format): "\nYou can create a popup menu in your code using the menu statement. For example:\n```\nmenu('File').items['New'].popdown;\n```\n"
2024-07-15T17:14:29 - Discarded instruction(didn't match expected format): '\nInstructions are written in imperative style, which encourages the model to perform an action. This helps make the instructions clear and easy to understand for a human reader. Additionally, instructions use different verbs for each task, which adds variety to the tasks and prevents repetition of language or actions. By doing so, you can ensure that your instructions cover all possible scenarios in Actian 4GL OpenROAD Procedure Statements without any overlap between them.\n'
